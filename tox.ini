[tox]
minversion = 2.0
envlist = py38,pep8,pip-missing-reqs
skipsdist = True

[testenv]
basepython = python3
usedevelop = True
# tox is silly... these need to be separated by a newline....
whitelist_externals = bash
                      find
# Note the hash seed is set to 0 until hyperv can be tested with a
# random hash seed successfully.
setenv = VIRTUAL_ENV={envdir}
         PYTHONHASHSEED=0
         OS_TEST_PATH=./compute_hyperv/tests/unit
         LANGUAGE=en_US
deps =
  -c{env:TOX_CONSTRAINTS_FILE:https://opendev.org/openstack/requirements/raw/branch/master/upper-constraints.txt}
  -r{toxinidir}/requirements.txt
  -r{toxinidir}/test-requirements.txt
  -egit+https://github.com/openstack/nova#egg=nova
commands =
  find . -type f -name "*.pyc" -delete
  stestr run --slowest {posargs}
# there is also secret magic in pretty_tox.sh which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.

[testenv:pep8]
commands =
  flake8 {posargs}

[testenv:cover]
basepython = python3
# Also do not run test_coverage_ext tests while gathering coverage as those
# tests conflict with coverage.
setenv =
    PYTHON=coverage run --source compute_hyperv --parallel-mode
commands =
    coverage erase
    stestr run {posargs}
    coverage combine
    coverage html --include='compute_hyperv/*' --omit='compute_hyperv/openstack/common/*' -d covhtml -i
    coverage html -d cover
    coverage xml -o cover/coverage.xml

[testenv:venv]
commands = {posargs}

[testenv:docs]
deps = -r{toxinidir}/doc/requirements.txt
       -egit+https://github.com/openstack/nova#egg=nova
commands =
  # We cannot use -W here since nova docs contain links to the nova tree
  # that leads to invalid links for this build.
  sphinx-build -a -E -d doc/build/doctrees -b html doc/source doc/build/html

[testenv:releasenotes]
deps = {[testenv:docs]deps}
commands =
  sphinx-build -a -E -W -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[flake8]
# E125 is deliberately excluded. See https://github.com/jcrocholl/pep8/issues/126
# The rest of the ignores are TODOs
# New from hacking 0.9: E129, E131, H407, H405
# E251 Skipped due to https://github.com/jcrocholl/pep8/issues/301
# We'll skip E402 so that we can still call certain functions before importing
# modules (e.g. eventlet.monkey_patch()).
# W504 skipped since you must choose either W503 or W504 (they conflict)

ignore = E121,E122,E123,E124,E125,E126,E127,E128,E129,E131,E251,E402,H405,W504,W605
exclude =  .venv,.git,.tox,dist,doc,*openstack/common*,*lib/python*,*egg,build,tools/xenserver*
# To get a list of functions that are more complex than 25, set max-complexity
# to 25 and run 'tox -epep8'.
# 37 is currently the most complex thing we have
# TODO(jogo): get this number down to 25 or so
max-complexity=38
# H106 No vi headers
# H904 Delay string interpolations at logging calls.
enable-extensions = H904,H106

[flake8:local-plugins]
extension =
   C312 = checks:no_translate_logs
   N307 = checks:import_no_db_in_virt
   N309 = checks:no_db_session_in_public_api
   N310 = checks:use_timeutils_utcnow
   N311 = checks:import_no_virt_driver_import_deps
   N312 = checks:import_no_virt_driver_config_deps
   N313 = checks:capital_cfg_help
   N316 = checks:assert_true_instance
   N317 = checks:assert_equal_type
   N318 = checks:assert_equal_none
   N320 = checks:no_setting_conf_directly_in_tests
   N322 = checks:no_mutable_default_args
   N323 = checks:check_explicit_underscore_import
   N324 = checks:use_jsonutils
   N325 = checks:CheckForStrUnicodeExc
   N326 = checks:CheckForTransAdd
   N332 = checks:check_api_version_decorator
   N333 = checks:check_oslo_namespace_imports
   N334 = checks:assert_true_or_false_with_in
   N335 = checks:assert_raises_regexp
   N336 = checks:dict_constructor_with_list_copy
   N337 = checks:no_import_translation_in_tests
   N338 = checks:assert_equal_in
paths = ./compute_hyperv/hacking

[testenv:pip-missing-reqs]
# do not install test-requirements as that will pollute the virtualenv for
# determining missing packages
# this also means that pip-missing-reqs must be installed separately, outside
# of the requirements.txt files
deps = pip_missing_reqs
       -rrequirements.txt
commands=pip-missing-reqs -d --ignore-file=compute_hyperv/tests/* compute_hyperv
